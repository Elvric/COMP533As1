!SESSION 2018-10-07 13:26:12.467 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=11
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=fr_CA
Framework arguments:  -product org.eclipse.epp.package.java.product -keyring /Users/Mystelvric/.eclipse_keyring
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.java.product -keyring /Users/Mystelvric/.eclipse_keyring

This is a continuation of log file /Users/Mystelvric/Documents/Mcgill/Fall 2018/COMP533/.metadata/.bak_0.log
Created Time: 2018-10-07 14:13:43.034

!ENTRY org.eclipse.jface.text 4 0 2018-10-07 14:13:43.035
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.ClassCastException: class org.eclipse.ajdt.core.javaelements.PointcutElementInfo cannot be cast to class org.eclipse.jdt.internal.core.SourceMethodInfo (org.eclipse.ajdt.core.javaelements.PointcutElementInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @52b2c255; org.eclipse.jdt.internal.core.SourceMethodInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.javaelements.AspectJMemberElement.getDefaultValue(AspectJMemberElement.java:324)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getAnnotationMemberDefaultValue(JavadocHover.java:857)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:833)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 14:16:15.415
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 14:16:41.717
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.jdt.core 4 1005 2018-10-07 14:17:29.216
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ClassCastException: class org.eclipse.jdt.internal.compiler.ast.SingleNameReference cannot be cast to class org.eclipse.jdt.internal.compiler.ast.Annotation (org.eclipse.jdt.internal.compiler.ast.SingleNameReference and org.eclipse.jdt.internal.compiler.ast.Annotation are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeMarkerAnnotation(AJSourceElementParser2.java:450)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6501)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 2 2018-10-07 14:17:29.218
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ClassCastException: class org.eclipse.jdt.internal.compiler.ast.SingleNameReference cannot be cast to class org.eclipse.jdt.internal.compiler.ast.Annotation (org.eclipse.jdt.internal.compiler.ast.SingleNameReference and org.eclipse.jdt.internal.compiler.ast.Annotation are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeMarkerAnnotation(AJSourceElementParser2.java:450)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6501)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ClassCastException: class org.eclipse.jdt.internal.compiler.ast.SingleNameReference cannot be cast to class org.eclipse.jdt.internal.compiler.ast.Annotation (org.eclipse.jdt.internal.compiler.ast.SingleNameReference and org.eclipse.jdt.internal.compiler.ast.Annotation are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeMarkerAnnotation(AJSourceElementParser2.java:450)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6501)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 14:17:29.219
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ClassCastException: class org.eclipse.jdt.internal.compiler.ast.SingleNameReference cannot be cast to class org.eclipse.jdt.internal.compiler.ast.Annotation (org.eclipse.jdt.internal.compiler.ast.SingleNameReference and org.eclipse.jdt.internal.compiler.ast.Annotation are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeMarkerAnnotation(AJSourceElementParser2.java:450)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6501)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 14:17:29.219
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ClassCastException: class org.eclipse.jdt.internal.compiler.ast.SingleNameReference cannot be cast to class org.eclipse.jdt.internal.compiler.ast.Annotation (org.eclipse.jdt.internal.compiler.ast.SingleNameReference and org.eclipse.jdt.internal.compiler.ast.Annotation are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeMarkerAnnotation(AJSourceElementParser2.java:450)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6501)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 0 2018-10-07 14:17:29.221
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ClassCastException: class org.eclipse.jdt.internal.compiler.ast.SingleNameReference cannot be cast to class org.eclipse.jdt.internal.compiler.ast.Annotation (org.eclipse.jdt.internal.compiler.ast.SingleNameReference and org.eclipse.jdt.internal.compiler.ast.Annotation are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeMarkerAnnotation(AJSourceElementParser2.java:450)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6501)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ClassCastException: class org.eclipse.jdt.internal.compiler.ast.SingleNameReference cannot be cast to class org.eclipse.jdt.internal.compiler.ast.Annotation (org.eclipse.jdt.internal.compiler.ast.SingleNameReference and org.eclipse.jdt.internal.compiler.ast.Annotation are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeMarkerAnnotation(AJSourceElementParser2.java:450)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6501)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 14:17:29.221
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import java.lang.RuntimeException;

// Start of user code for imports
// End of user code

/**
 * NotEnoughtFundsException class definition.
 * Generated by the TouchCORE code generator.
 */
public class NotEnoughtFundsException extends RuntimeException {
    
    public NotEnoughtFundsException() {
        /* TODO: No message view defined */
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
	
	pointcut OperationCall(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

import javax.swing.JButton;
import javax.swing.JTextField;
import javax.swing.JList;
import java.lang.Runnable;
import java.awt.Component;
import javax.swing.Box;
import javax.swing.JScrollPane;
import java.awt.GridLayout;
import javax.swing.SwingUtilities;
import javax.swing.DefaultListModel;
import javax.swing.text.Document;
import javax.swing.JFrame;
import javax.swing.event.ListSelectionListener;
import java.awt.BorderLayout;
import javax.swing.event.ListSelectionEvent;
import javax.swing.JPanel;

// Start of user code for imports
// End of user code

/**
 * BankWithLogging class definition.
 * Generated by the TouchCORE code generator.
 */
public class BankWithLogging extends JPanel implements ListSelectionListener {
    
    protected DefaultListModel<Customer> customerListModel;
    protected JList<Customer> customerList;
    protected JButton createCustomerButton;
    protected JButton createAccountButton;
    protected JTextField customerNameField;
    protected DefaultListModel<Account> accountListModel;
    protected JList<Account> accountList;
    protected JButton depositButton;
    protected JButton withdrawButton;
    protected JTextField amountField;
    
    public BankWithLogging() {
        BorderLayout borderlayout = new BorderLayout();
        super.setLayout(borderlayout);
        this.customerListModel = new DefaultListModel<Customer>();
        this.customerList = new JList<Customer>(customerListModel);
        customerList.setSelectionMode(0);
        customerList.setVisibleRowCount(5);
        customerList.addListSelectionListener(this);
        JScrollPane jscrollpane = new JScrollPane(this.customerList);
        this.accountListModel = new DefaultListModel<Account>();
        this.accountList = new JList<Account>(accountListModel);
        accountList.setSelectionMode(0);
        accountList.setVisibleRowCount(5);
        accountList.addListSelectionListener(this);
        JScrollPane jscrollpane2 = new JScrollPane(this.accountList);
        this.createCustomerButton = new JButton("Create Customer");
        createCustomerButton.setEnabled(true);
        this.customerNameField = new JTextField(10);
        this.createAccountButton = new JButton("Create Account");
        CustomerListener createCustomerListener = new CustomerListener(this.createCustomerButton, this.customerNameField, this.customerListModel, this.createAccountButton, this.customerList);
        createCustomerButton.addActionListener(createCustomerListener);
        Document document = customerNameField.getDocument();
        document.addDocumentListener(createCustomerListener);
        createCustomerButton.setEnabled(false);
        createAccountButton.setEnabled(false);
        AccountListener createAccountListener = new AccountListener(this.accountListModel, this.customerList, this.accountList);
        createAccountButton.addActionListener(createAccountListener);
        this.amountField = new JTextField(10);
        this.depositButton = new JButton("Deposit");
        AccountActionListener accountActionListener = new AccountActionListener(this.depositButton, this.amountField, this.accountList, true, this);
        depositButton.addActionListener(accountActionListener);
        depositButton.setEnabled(false);
        Document amountDocument = amountField.getDocument();
        amountDocument.addDocumentListener(accountActionListener);
        this.withdrawButton = new JButton("Withdraw");
        AccountActionListener accountActionListener2 = new AccountActionListener(this.withdrawButton, this.amountField, this.accountList, false, this);
        withdrawButton.addActionListener(accountActionListener2);
        withdrawButton.setEnabled(false);
        amountDocument.addDocumentListener(accountActionListener2);
        JPanel buttonPanel = new JPanel();
        GridLayout gridlayout = new GridLayout(0, 2);
        buttonPanel.setLayout(gridlayout);
        buttonPanel.add(this.customerNameField);
        buttonPanel.add(this.createCustomerButton);
        Component filler = Box.createHorizontalStrut(5);
        buttonPanel.add(filler);
        buttonPanel.add(this.createAccountButton);
        buttonPanel.add(this.amountField);
        buttonPanel.add(this.depositButton);
        Component anotherFiller = Box.createHorizontalStrut(5);
        buttonPanel.add(anotherFiller);
        buttonPanel.add(this.withdrawButton);
        String pos = BorderLayout.PAGE_START;
        super.add(jscrollpane, pos);
        pos = BorderLayout.CENTER;
        super.add(jscrollpane2, pos);
        pos = BorderLayout.PAGE_END;
        super.add(buttonPanel, pos);
    }

    public static void main(String[] args) {
        Runnable r = new Runnable() { public void run() { createAndShowGUI(); } };
        SwingUtilities.invokeLater(r);
    }

    public static void createAndShowGUI() {
        JFrame myFrame = new JFrame("Bank Application");
        int operationConstant = JFrame.EXIT_ON_CLOSE;
        myFrame.setDefaultCloseOperation(operationConstant);
        BankWithLogging contentPane = new BankWithLogging();
        contentPane.setOpaque(true);
        myFrame.setContentPane(contentPane);
        myFrame.pack();
        myFrame.setVisible(true);
    }

    DefaultListModel<Customer> getCustomerListModel() {
        return this.customerListModel;
    }

    boolean setCustomerListModel(DefaultListModel<Customer> newObject) {
        this.customerListModel = newObject;
        return true;
    }

    JList<Customer> getCustomerList() {
        return this.customerList;
    }

    boolean setCustomerList(JList<Customer> newObject) {
        this.customerList = newObject;
        return true;
    }

    public void valueChanged(ListSelectionEvent arg0) {
        boolean valueIsAdjusting = arg0.getValueIsAdjusting();
        if (!valueIsAdjusting) {
            int selectedIndex = customerList.getSelectedIndex();
            if (selectedIndex == -1) {
                
            }
        }
    }

    JButton getCreateCustomerButton() {
        return this.createCustomerButton;
    }

    boolean setCreateCustomerButton(JButton newObject) {
        this.createCustomerButton = newObject;
        return true;
    }

    JButton getCreateAccountButton() {
        return this.createAccountButton;
    }

    boolean setCreateAccountButton(JButton newObject) {
        this.createAccountButton = newObject;
        return true;
    }

    JTextField getCustomerNameField() {
        return this.customerNameField;
    }

    boolean setCustomerNameField(JTextField newObject) {
        this.customerNameField = newObject;
        return true;
    }

    DefaultListModel<Account> getAccountListModel() {
        return this.accountListModel;
    }

    boolean setAccountListModel(DefaultListModel<Account> newObject) {
        this.accountListModel = newObject;
        return true;
    }

    JList<Account> getAccountList() {
        return this.accountList;
    }

    boolean setAccountList(JList<Account> newObject) {
        this.accountList = newObject;
        return true;
    }

    JButton getDepositButton() {
        return this.depositButton;
    }

    boolean setDepositButton(JButton newObject) {
        this.depositButton = newObject;
        return true;
    }

    JButton getWithdrawButton() {
        return this.withdrawButton;
    }

    boolean setWithdrawButton(JButton newObject) {
        this.withdrawButton = newObject;
        return true;
    }

    JTextField getAmountField() {
        return this.amountField;
    }

    boolean setAmountField(JTextField newObject) {
        this.amountField = newObject;
        return true;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateLog(Object o);
	abstract pointcut OperationCall(Object o);

	after (Object o) : 
		CreateLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCall(o){
		Object[] args = thisJoinPoint.getArgs();
		String output = "";
		for(int i = 0; i < args.length; i++)
		{
			output+=
		}
		String stringToLog = thisJoinPoint.getSignature() + " call on object " +
							 o + " with parameter " + thisJoinPoint.getArgs();
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ClassCastException: class org.eclipse.jdt.internal.compiler.ast.SingleNameReference cannot be cast to class org.eclipse.jdt.internal.compiler.ast.Annotation (org.eclipse.jdt.internal.compiler.ast.SingleNameReference and org.eclipse.jdt.internal.compiler.ast.Annotation are in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeMarkerAnnotation(AJSourceElementParser2.java:450)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6501)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 14:18:41.186
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.contribution.weaving.jdt 4 0 2018-10-07 14:23:49.463
!MESSAGE 
!STACK 0
org.eclipse.core.runtime.OperationCanceledException
	at org.eclipse.jdt.internal.core.AbstractClassFile.getClassFileContent(AbstractClassFile.java:213)
	at org.eclipse.jdt.internal.core.ModularClassFile.getJarBinaryModuleInfo(ModularClassFile.java:171)
	at org.eclipse.jdt.internal.core.ModularClassFile.getBinaryModuleInfo(ModularClassFile.java:136)
	at org.eclipse.jdt.internal.core.ModularClassFile.buildStructure(ModularClassFile.java:55)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.ModularClassFile.getModule(ModularClassFile.java:298)
	at org.eclipse.jdt.internal.core.PackageFragmentRoot.getModuleDescription(PackageFragmentRoot.java:905)
	at org.eclipse.jdt.internal.core.JarPackageFragmentRoot.getModuleDescription(JarPackageFragmentRoot.java:321)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.<init>(SearchableEnvironment.java:96)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.<init>(SearchableEnvironment.java:119)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.<init>(CancelableNameEnvironment.java:32)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.<init>(CancelableNameEnvironment.java:29)
	at org.eclipse.ajdt.core.codeconversion.ITDAwareNameEnvironment.<init>(ITDAwareNameEnvironment.java:34)
	at org.eclipse.ajdt.core.text.ITDCodeSelection.findJavaElement(ITDCodeSelection.java:52)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doCodeSelect(ContentAssistProvider.java:164)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$6$3f3ffce8(ITDAwarenessAspect.aj:317)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:383)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getJavaElementsAt(AbstractJavaEditorTextHover.java:124)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:674)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 14:24:45.482
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 14:24:51.558
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 14:26:33.023
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 14:33:25.906
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.contribution.weaving.jdt 4 0 2018-10-07 14:39:04.078
!MESSAGE 
!STACK 0
org.eclipse.core.runtime.OperationCanceledException
	at org.eclipse.jdt.internal.core.AbstractClassFile.getClassFileContent(AbstractClassFile.java:213)
	at org.eclipse.jdt.internal.core.ModularClassFile.getJarBinaryModuleInfo(ModularClassFile.java:171)
	at org.eclipse.jdt.internal.core.ModularClassFile.getBinaryModuleInfo(ModularClassFile.java:136)
	at org.eclipse.jdt.internal.core.ModularClassFile.buildStructure(ModularClassFile.java:55)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.ModularClassFile.getModule(ModularClassFile.java:298)
	at org.eclipse.jdt.internal.core.PackageFragmentRoot.getModuleDescription(PackageFragmentRoot.java:905)
	at org.eclipse.jdt.internal.core.JarPackageFragmentRoot.getModuleDescription(JarPackageFragmentRoot.java:321)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.<init>(SearchableEnvironment.java:96)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.<init>(SearchableEnvironment.java:119)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.<init>(CancelableNameEnvironment.java:32)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.<init>(CancelableNameEnvironment.java:29)
	at org.eclipse.ajdt.core.codeconversion.ITDAwareNameEnvironment.<init>(ITDAwareNameEnvironment.java:34)
	at org.eclipse.ajdt.core.text.ITDCodeSelection.findJavaElement(ITDCodeSelection.java:52)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doCodeSelect(ContentAssistProvider.java:164)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$6$3f3ffce8(ITDAwarenessAspect.aj:317)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:383)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getJavaElementsAt(AbstractJavaEditorTextHover.java:124)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:674)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.contribution.weaving.jdt 4 0 2018-10-07 14:41:42.717
!MESSAGE 
!STACK 0
org.eclipse.core.runtime.OperationCanceledException
	at org.eclipse.jdt.internal.core.AbstractClassFile.getClassFileContent(AbstractClassFile.java:213)
	at org.eclipse.jdt.internal.core.ModularClassFile.getJarBinaryModuleInfo(ModularClassFile.java:171)
	at org.eclipse.jdt.internal.core.ModularClassFile.getBinaryModuleInfo(ModularClassFile.java:136)
	at org.eclipse.jdt.internal.core.ModularClassFile.buildStructure(ModularClassFile.java:55)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.ModularClassFile.getModule(ModularClassFile.java:298)
	at org.eclipse.jdt.internal.core.PackageFragmentRoot.getModuleDescription(PackageFragmentRoot.java:905)
	at org.eclipse.jdt.internal.core.JarPackageFragmentRoot.getModuleDescription(JarPackageFragmentRoot.java:321)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.<init>(SearchableEnvironment.java:96)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.<init>(SearchableEnvironment.java:119)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.<init>(CancelableNameEnvironment.java:32)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.<init>(CancelableNameEnvironment.java:29)
	at org.eclipse.ajdt.core.codeconversion.ITDAwareNameEnvironment.<init>(ITDAwareNameEnvironment.java:34)
	at org.eclipse.ajdt.core.text.ITDCodeSelection.findJavaElement(ITDCodeSelection.java:52)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doCodeSelect(ContentAssistProvider.java:164)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$6$3f3ffce8(ITDAwarenessAspect.aj:317)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:383)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getJavaElementsAt(AbstractJavaEditorTextHover.java:124)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:674)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 14:52:28.457
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.jface.text 4 0 2018-10-07 15:02:01.212
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.ClassCastException: class org.eclipse.ajdt.core.javaelements.PointcutElementInfo cannot be cast to class org.eclipse.jdt.internal.core.SourceMethodInfo (org.eclipse.ajdt.core.javaelements.PointcutElementInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @52b2c255; org.eclipse.jdt.internal.core.SourceMethodInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.javaelements.AspectJMemberElement.getDefaultValue(AspectJMemberElement.java:324)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getAnnotationMemberDefaultValue(JavadocHover.java:857)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:833)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.jface.text 4 0 2018-10-07 15:02:06.889
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.ClassCastException: class org.eclipse.ajdt.core.javaelements.PointcutElementInfo cannot be cast to class org.eclipse.jdt.internal.core.SourceMethodInfo (org.eclipse.ajdt.core.javaelements.PointcutElementInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @52b2c255; org.eclipse.jdt.internal.core.SourceMethodInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.javaelements.AspectJMemberElement.getDefaultValue(AspectJMemberElement.java:324)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getAnnotationMemberDefaultValue(JavadocHover.java:857)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:833)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.jface.text 4 0 2018-10-07 15:02:18.104
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.ClassCastException: class org.eclipse.ajdt.core.javaelements.PointcutElementInfo cannot be cast to class org.eclipse.jdt.internal.core.SourceMethodInfo (org.eclipse.ajdt.core.javaelements.PointcutElementInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @52b2c255; org.eclipse.jdt.internal.core.SourceMethodInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.javaelements.AspectJMemberElement.getDefaultValue(AspectJMemberElement.java:324)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getAnnotationMemberDefaultValue(JavadocHover.java:857)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:833)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.jface.text 4 0 2018-10-07 15:02:24.841
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.ClassCastException: class org.eclipse.ajdt.core.javaelements.PointcutElementInfo cannot be cast to class org.eclipse.jdt.internal.core.SourceMethodInfo (org.eclipse.ajdt.core.javaelements.PointcutElementInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @52b2c255; org.eclipse.jdt.internal.core.SourceMethodInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.javaelements.AspectJMemberElement.getDefaultValue(AspectJMemberElement.java:324)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getAnnotationMemberDefaultValue(JavadocHover.java:857)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:833)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 15:06:26.610
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 15:06:26.764
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 15:06:27.421
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.jdt.core 4 1005 2018-10-07 15:06:32.479
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 2 2018-10-07 15:06:32.480
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:32.481
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:32.481
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 0 2018-10-07 15:06:32.489
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:32.489
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p))
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.core 4 1005 2018-10-07 15:06:34.504
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 2 2018-10-07 15:06:34.505
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:34.505
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:34.505
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 0 2018-10-07 15:06:34.507
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:34.507
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String ((...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.core 4 1005 2018-10-07 15:06:37.532
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 2 2018-10-07 15:06:37.533
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:37.534
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:37.534
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 0 2018-10-07 15:06:37.536
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:37.536
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:121)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.core 4 1005 2018-10-07 15:06:39.044
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 2 2018-10-07 15:06:39.047
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:39.047
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:39.047
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 0 2018-10-07 15:06:39.049
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:06:39.050
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (...)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.core 4 1005 2018-10-07 15:07:04.775
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 2 2018-10-07 15:07:04.776
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:07:04.777
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:07:04.778
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 0 2018-10-07 15:07:04.779
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:07:04.779
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.core 4 1005 2018-10-07 15:07:05.788
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 2 2018-10-07 15:07:05.790
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:07:05.790
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:07:05.790
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jdt.ui 4 0 2018-10-07 15:07:05.792
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	... 17 more
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
Caused by: java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2018-10-07 15:07:05.792
!MESSAGE All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
!STACK 0
java.lang.RuntimeException: All Source code being worked on:
----------------------------------- SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- SOURCE END ------------------------------------------------------------------------ WORKING COPIES ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Customer class definition.
 * Generated by the TouchCORE code generator.
 */
public class Customer {
    
    protected String name;
    
    public Customer(String givenName) {
        this.name = givenName;
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public String getName() {
        return this.name;
    }

    public String toString() {
        return this.name;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Account class definition.
 * Generated by the TouchCORE code generator.
 */
public class Account {
    
    protected int balanceInCents;
    protected int accountNumber;
    protected Customer owner;
    
    public Account(int initialBalance, Customer owner) {
        this.balanceInCents = initialBalance;
        this.owner = owner;
        this.accountNumber = (int) (Math.random() * 1000000);
        //String stringToLog = "Created object " + this;
        //Logger.log(stringToLog);
    }

    public void deposit(int amount) {
        //String stringToLog = "deposit called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        this.balanceInCents = balanceInCents + amount;
    }

    public void withdraw(int amount) {
        //String stringToLog = "withdraw called on object " + this + " with parameter " + amount;
        //Logger.log(stringToLog);
        if (balanceInCents >= amount) {
            this.balanceInCents = balanceInCents - amount;
        } else {
            NotEnoughtFundsException nefException = new NotEnoughtFundsException();
            throw nefException;
        }
    }

    Customer getOwner() {
        return this.owner;
    }

    boolean setOwner(Customer newObject) {
        this.owner = newObject;
        return true;
    }

    public String toString() {
        String returnedString = "Account " + accountNumber + " of " + owner.getName() + ": " + balanceInCents;
        return returnedString;
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public aspect Connector extends Loggable{
	pointcut CreateObjectLog(Object o) :
		initialization(public *.new(..)) 
		&& target(o) && (within(Account) || within(Customer));
		call(public String (..)) && target(p));
	
	pointcut OperationCallLog(Object o) :
		execution(public void *(..)) && target(o) && (within(Account) || within(Customer));
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

// Start of user code for imports
// End of user code

/**
 * Logger class definition.
 * Generated by the TouchCORE code generator.
 */
public class Logger {
    
    public static void log(String message) {
        System.out.println(message);
    }
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPY SOURCE BEGIN -------------------------------------
package woven_bankwithlogging;

public abstract aspect Loggable {
	abstract pointcut CreateObjectLog(Object o);
	abstract pointcut OperationCallLog(Object o);

	after (Object o) : 
		CreateObjectLog(o)  {
		String stringToLog = "Created object " + o;
		System.out.println(stringToLog);	
		}
	
	after(Object o) : OperationCallLog(o){
		Object[] args = thisJoinPoint.getArgs();
		StringBuilder output = new StringBuilder();
		for(int i = 0; i < args.length; i++)
		{
			output.append(args[i] + " ");
		}
		String name = thisJoinPoint.getSignature().getName();
		String stringToLog =  name + " call on object " +
							 o + " with parameter " + output;
		System.out.println(stringToLog);
	}
}

----------------------------------- WORKING COPY SOURCE END ------------------------------------------------------------------------ WORKING COPIES END -------------------------------------
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:299)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:188)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.makeConsistent(AJReconcileWorkingCopyOperation.java:244)
	at org.eclipse.ajdt.core.reconcile.AJReconcileWorkingCopyOperation.executeOperation(AJReconcileWorkingCopyOperation.java:112)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:736)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:802)
	at org.eclipse.ajdt.core.javaelements.AJCompilationUnit.reconcile(AJCompilationUnit.java:519)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:92)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
Caused by: java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 100
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.consumeSingleMemberAnnotation(AJSourceElementParser2.java:578)
	at org.eclipse.jdt.internal.compiler.parser.Parser.consumeRule(Parser.java:6505)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11674)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parseStatements(Parser.java:12312)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisitMethod(Parser.java:12614)
	at org.eclipse.jdt.internal.compiler.parser.Parser$1MethodVisitor.endVisit(Parser.java:12600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:368)
	at org.eclipse.jdt.internal.compiler.parser.Parser.recoverStatements(Parser.java:12720)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:11741)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:12027)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.parseStatements(MethodDeclaration.java:198)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.parseMethods(TypeDeclaration.java:900)
	at org.eclipse.jdt.internal.compiler.parser.Parser.getMethodBodies(Parser.java:10712)
	at org.eclipse.ajdt.core.parserbridge.AJSourceElementParser2.parseCompilationUnit(AJSourceElementParser2.java:971)
	at org.eclipse.ajdt.core.parserbridge.AJCompilationUnitProblemFinder.processAJ(AJCompilationUnitProblemFinder.java:241)
	... 16 more

!ENTRY org.eclipse.jface.text 4 0 2018-10-07 15:21:04.819
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.ClassCastException: class org.eclipse.ajdt.core.javaelements.PointcutElementInfo cannot be cast to class org.eclipse.jdt.internal.core.SourceMethodInfo (org.eclipse.ajdt.core.javaelements.PointcutElementInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @52b2c255; org.eclipse.jdt.internal.core.SourceMethodInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.javaelements.AspectJMemberElement.getDefaultValue(AspectJMemberElement.java:324)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getAnnotationMemberDefaultValue(JavadocHover.java:857)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:833)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.jface.text 4 0 2018-10-07 15:34:09.165
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.ClassCastException: class org.eclipse.ajdt.core.javaelements.PointcutElementInfo cannot be cast to class org.eclipse.jdt.internal.core.SourceMethodInfo (org.eclipse.ajdt.core.javaelements.PointcutElementInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @52b2c255; org.eclipse.jdt.internal.core.SourceMethodInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.javaelements.AspectJMemberElement.getDefaultValue(AspectJMemberElement.java:324)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getAnnotationMemberDefaultValue(JavadocHover.java:857)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:833)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 16:07:20.110
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 16:10:17.849
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.recommenders.completion.rcp 4 11 2018-10-07 16:17:23.388
!MESSAGE Session processor ‘org.eclipse.recommenders.statics.rcp.sessionprocessors.statics’ failed with exception.
!STACK 0
java.lang.NoClassDefFoundError: javax/annotation/PostConstruct
	at org.eclipse.recommenders.internal.rcp.RcpModule$Listener$1.afterInjection(RcpModule.java:278)
	at com.google.inject.internal.MembersInjectorImpl.notifyListeners(MembersInjectorImpl.java:97)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:95)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.FactoryProxy.get(FactoryProxy.java:54)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:46)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1031)
	at com.google.inject.internal.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)
	at com.google.inject.Scopes$1$1.get(Scopes.java:65)
	at com.google.inject.internal.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:40)
	at com.google.inject.internal.SingleParameterInjector.inject(SingleParameterInjector.java:38)
	at com.google.inject.internal.SingleParameterInjector.getAll(SingleParameterInjector.java:62)
	at com.google.inject.internal.ConstructorInjector.construct(ConstructorInjector.java:84)
	at com.google.inject.internal.ConstructorBindingImpl$Factory.get(ConstructorBindingImpl.java:254)
	at com.google.inject.internal.InjectorImpl$4$1.call(InjectorImpl.java:978)
	at com.google.inject.internal.InjectorImpl.callInContext(InjectorImpl.java:1024)
	at com.google.inject.internal.InjectorImpl$4.get(InjectorImpl.java:974)
	at com.google.inject.internal.InjectorImpl.getInstance(InjectorImpl.java:1013)
	at org.eclipse.recommenders.injection.ExtensionFactory.loadExtension(ExtensionFactory.java:50)
	at org.eclipse.recommenders.injection.ExtensionFactory.create(ExtensionFactory.java:42)
	at org.eclipse.core.internal.registry.ConfigurationElement.createExecutableExtension(ConfigurationElement.java:265)
	at org.eclipse.core.internal.registry.ConfigurationElementHandle.createExecutableExtension(ConfigurationElementHandle.java:63)
	at org.eclipse.recommenders.completion.rcp.processable.SessionProcessorDescriptor.getProcessor(SessionProcessorDescriptor.java:101)
	at org.eclipse.recommenders.completion.rcp.processable.IntelligentCompletionProposalComputer.sessionStarted(IntelligentCompletionProposalComputer.java:116)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.sessionStarted(CompletionProposalComputerDescriptor.java:426)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.sessionStarted(CompletionProposalCategory.java:387)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor$CompletionListener.assistSessionStarted(ContentAssistProcessor.java:122)
	at org.eclipse.jface.text.contentassist.ContentAssistant.lambda$10(ContentAssistant.java:2506)
	at java.base/java.util.Collections$SingletonSet.forEach(Collections.java:4795)
	at org.eclipse.jface.text.contentassist.ContentAssistant.fireSessionBeginEvent(ContentAssistant.java:2503)
	at org.eclipse.jface.text.contentassist.ContentAssistant.prepareToShowCompletions(ContentAssistant.java:1850)
	at org.eclipse.jface.text.contentassist.ContentAssistant.access$6(ContentAssistant.java:1841)
	at org.eclipse.jface.text.contentassist.ContentAssistant$AutoAssistListener.lambda$0(ContentAssistant.java:378)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4068)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3735)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1501)

!ENTRY org.eclipse.contribution.weaving.jdt 4 0 2018-10-07 16:45:40.940
!MESSAGE 
!STACK 0
org.eclipse.core.runtime.OperationCanceledException
	at org.eclipse.jdt.internal.core.AbstractClassFile.getClassFileContent(AbstractClassFile.java:213)
	at org.eclipse.jdt.internal.core.ModularClassFile.getJarBinaryModuleInfo(ModularClassFile.java:171)
	at org.eclipse.jdt.internal.core.ModularClassFile.getBinaryModuleInfo(ModularClassFile.java:136)
	at org.eclipse.jdt.internal.core.ModularClassFile.buildStructure(ModularClassFile.java:55)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:268)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.ModularClassFile.getModule(ModularClassFile.java:298)
	at org.eclipse.jdt.internal.core.PackageFragmentRoot.getModuleDescription(PackageFragmentRoot.java:905)
	at org.eclipse.jdt.internal.core.JarPackageFragmentRoot.getModuleDescription(JarPackageFragmentRoot.java:321)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.<init>(SearchableEnvironment.java:96)
	at org.eclipse.jdt.internal.core.SearchableEnvironment.<init>(SearchableEnvironment.java:119)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.<init>(CancelableNameEnvironment.java:32)
	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.<init>(CancelableNameEnvironment.java:29)
	at org.eclipse.ajdt.core.codeconversion.ITDAwareNameEnvironment.<init>(ITDAwareNameEnvironment.java:34)
	at org.eclipse.ajdt.core.text.ITDCodeSelection.findJavaElement(ITDCodeSelection.java:52)
	at org.eclipse.ajdt.internal.core.contentassist.ContentAssistProvider.doCodeSelect(ContentAssistProvider.java:164)
	at org.eclipse.contribution.jdt.itdawareness.ITDAwarenessAspect.ajc$around$org_eclipse_contribution_jdt_itdawareness_ITDAwarenessAspect$6$3f3ffce8(ITDAwarenessAspect.aj:317)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeSelect(CompilationUnit.java:383)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractJavaEditorTextHover.getJavaElementsAt(AbstractJavaEditorTextHover.java:124)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:674)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)

!ENTRY org.eclipse.jface.text 4 0 2018-10-07 16:55:17.949
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.ClassCastException: class org.eclipse.ajdt.core.javaelements.PointcutElementInfo cannot be cast to class org.eclipse.jdt.internal.core.SourceMethodInfo (org.eclipse.ajdt.core.javaelements.PointcutElementInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @52b2c255; org.eclipse.jdt.internal.core.SourceMethodInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @735988cf)
	at org.eclipse.ajdt.core.javaelements.AspectJMemberElement.getDefaultValue(AspectJMemberElement.java:324)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getAnnotationMemberDefaultValue(JavadocHover.java:857)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:833)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)
!SESSION 2018-10-08 14:34:07.524 -----------------------------------------------
eclipse.buildId=4.9.0.I20180906-0745
java.version=11
java.vendor=Oracle Corporation
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=fr_CA
Framework arguments:  -product org.eclipse.epp.package.java.product -keyring /Users/Mystelvric/.eclipse_keyring
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 -product org.eclipse.epp.package.java.product -keyring /Users/Mystelvric/.eclipse_keyring

!ENTRY org.eclipse.mylyn.bugzilla.core 4 0 2018-10-08 14:34:10.302
!MESSAGE FrameworkEvent ERROR
!STACK 0
org.osgi.framework.BundleException: Could not resolve module: org.eclipse.mylyn.bugzilla.core [278]
  Unresolved requirement: Require-Bundle: org.apache.xmlrpc
    -> Bundle-SymbolicName: org.apache.xmlrpc; bundle-version="3.0.0.v20100427-1100"
       org.apache.xmlrpc [68]
         Unresolved requirement: Import-Package: javax.xml.bind
  Unresolved requirement: Require-Bundle: org.eclipse.mylyn.commons.xmlrpc; bundle-version="[3.8.0,4.0.0)"
    -> Bundle-SymbolicName: org.eclipse.mylyn.commons.xmlrpc; bundle-version="3.24.2.v20180904-2231"; singleton:="true"
       org.eclipse.mylyn.commons.xmlrpc [295]
         Unresolved requirement: Require-Bundle: org.apache.xmlrpc; bundle-version="[3.0.0,4.0.0)"
           -> Bundle-SymbolicName: org.apache.xmlrpc; bundle-version="3.0.0.v20100427-1100"

	at org.eclipse.osgi.container.Module.start(Module.java:447)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1685)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1664)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1627)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1558)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:233)
	at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:343)

!ENTRY org.eclipse.mylyn.bugzilla.ui 4 0 2018-10-08 14:34:10.306
!MESSAGE FrameworkEvent ERROR
!STACK 0
org.osgi.framework.BundleException: Could not resolve module: org.eclipse.mylyn.bugzilla.ui [280]
  Unresolved requirement: Require-Bundle: org.eclipse.mylyn.bugzilla.core; bundle-version="[3.8.0,4.0.0)"
    -> Bundle-SymbolicName: org.eclipse.mylyn.bugzilla.core; bundle-version="3.24.2.v20180905-0003"; singleton:="true"
       org.eclipse.mylyn.bugzilla.core [278]
         Unresolved requirement: Require-Bundle: org.apache.xmlrpc
           -> Bundle-SymbolicName: org.apache.xmlrpc; bundle-version="3.0.0.v20100427-1100"
              org.apache.xmlrpc [68]
                Unresolved requirement: Import-Package: javax.xml.bind
         Unresolved requirement: Require-Bundle: org.eclipse.mylyn.commons.xmlrpc; bundle-version="[3.8.0,4.0.0)"
           -> Bundle-SymbolicName: org.eclipse.mylyn.commons.xmlrpc; bundle-version="3.24.2.v20180904-2231"; singleton:="true"
              org.eclipse.mylyn.commons.xmlrpc [295]
                Unresolved requirement: Require-Bundle: org.apache.xmlrpc; bundle-version="[3.0.0,4.0.0)"
                  -> Bundle-SymbolicName: org.apache.xmlrpc; bundle-version="3.0.0.v20100427-1100"

	at org.eclipse.osgi.container.Module.start(Module.java:447)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1685)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1664)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1627)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1558)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:233)
	at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:343)

!ENTRY org.eclipse.mylyn.commons.xmlrpc 4 0 2018-10-08 14:34:10.308
!MESSAGE FrameworkEvent ERROR
!STACK 0
org.osgi.framework.BundleException: Could not resolve module: org.eclipse.mylyn.commons.xmlrpc [295]
  Unresolved requirement: Require-Bundle: org.apache.xmlrpc; bundle-version="[3.0.0,4.0.0)"
    -> Bundle-SymbolicName: org.apache.xmlrpc; bundle-version="3.0.0.v20100427-1100"
       org.apache.xmlrpc [68]
         Unresolved requirement: Import-Package: javax.xml.bind

	at org.eclipse.osgi.container.Module.start(Module.java:447)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1685)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.incStartLevel(ModuleContainer.java:1664)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.doContainerStartLevel(ModuleContainer.java:1627)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1558)
	at org.eclipse.osgi.container.ModuleContainer$ContainerStartLevel.dispatchEvent(ModuleContainer.java:1)
	at org.eclipse.osgi.framework.eventmgr.EventManager.dispatchEvent(EventManager.java:233)
	at org.eclipse.osgi.framework.eventmgr.EventManager$EventThread.run(EventManager.java:343)

!ENTRY org.eclipse.core.net 1 0 2018-10-08 14:34:18.477
!MESSAGE System property http.nonProxyHosts has been set to local|*.local|169.254/16|*.169.254/16|127.0.0.1 by an external source. This value will be overwritten using the values from the preferences

!ENTRY org.eclipse.mylyn.tasks.core 4 0 2018-10-08 14:34:25.078
!MESSAGE Unexpected error while loading repository template extensions
!SUBENTRY 1 org.eclipse.mylyn.tasks.core 4 0 2018-10-08 14:34:25.078
!MESSAGE Could not load repository template extension contributed by 'org.eclipse.mylyn.bugzilla.ide' with connectorKind 'bugzilla'

!ENTRY org.eclipse.jface.text 4 0 2018-10-08 14:35:03.240
!MESSAGE Unexpected runtime error while computing a text hover
!STACK 0
java.lang.ClassCastException: class org.eclipse.ajdt.core.javaelements.PointcutElementInfo cannot be cast to class org.eclipse.jdt.internal.core.SourceMethodInfo (org.eclipse.ajdt.core.javaelements.PointcutElementInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @a47a011; org.eclipse.jdt.internal.core.SourceMethodInfo is in unnamed module of loader org.eclipse.osgi.internal.loader.EquinoxClassLoader @722b3ba2)
	at org.eclipse.ajdt.core.javaelements.AspectJMemberElement.getDefaultValue(AspectJMemberElement.java:324)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getAnnotationMemberDefaultValue(JavadocHover.java:857)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:833)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:755)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:678)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:670)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:167)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:133)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$4.run(TextViewerHoverManager.java:169)
